#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNEventsMetadataOverlay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PictureInPictureUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass FNEventsMetadataOverlay.FNEventsMetadataOverlay_C
// 0x0050 (0x0408 - 0x03B8)
class UFNEventsMetadataOverlay_C final : public UPictureInPictureMetadataOverlay
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Liked_Ani_1to1;                                    // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeInfo_Ani;                                      // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Liked_Ani;                                         // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UPictureInPictureClient*                PictureInPictureClient;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPictureInPictureFNEventsController*    FNEventsController;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              EventDispatcher_Skip;                              // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              EventDispatcher_Prev;                              // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Construct();
	void ExecuteUbergraph_FNEventsMetadataOverlay(int32 EntryPoint);
	void OnPartnerUpdateComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FNEventsMetadataOverlay_C">();
	}
	static class UFNEventsMetadataOverlay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFNEventsMetadataOverlay_C>();
	}
};
static_assert(alignof(UFNEventsMetadataOverlay_C) == 0x000008, "Wrong alignment on UFNEventsMetadataOverlay_C");
static_assert(sizeof(UFNEventsMetadataOverlay_C) == 0x000408, "Wrong size on UFNEventsMetadataOverlay_C");
static_assert(offsetof(UFNEventsMetadataOverlay_C, UberGraphFrame) == 0x0003B8, "Member 'UFNEventsMetadataOverlay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, Liked_Ani_1to1) == 0x0003C0, "Member 'UFNEventsMetadataOverlay_C::Liked_Ani_1to1' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, FadeInfo_Ani) == 0x0003C8, "Member 'UFNEventsMetadataOverlay_C::FadeInfo_Ani' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, Liked_Ani) == 0x0003D0, "Member 'UFNEventsMetadataOverlay_C::Liked_Ani' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, PictureInPictureClient) == 0x0003D8, "Member 'UFNEventsMetadataOverlay_C::PictureInPictureClient' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, FNEventsController) == 0x0003E0, "Member 'UFNEventsMetadataOverlay_C::FNEventsController' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, EventDispatcher_Skip) == 0x0003E8, "Member 'UFNEventsMetadataOverlay_C::EventDispatcher_Skip' has a wrong offset!");
static_assert(offsetof(UFNEventsMetadataOverlay_C, EventDispatcher_Prev) == 0x0003F8, "Member 'UFNEventsMetadataOverlay_C::EventDispatcher_Prev' has a wrong offset!");

}

