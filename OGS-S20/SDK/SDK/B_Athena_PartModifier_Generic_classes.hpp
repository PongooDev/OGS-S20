#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Athena_PartModifier_Generic

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C
// 0x00F8 (0x0548 - 0x0450)
class AB_Athena_PartModifier_Generic_C : public ACustomCharacterPartModifier
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Pet_Part_Modifier;                              // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprint_Reactive;                                   // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPetItemDefinition*               PetClassToSpawn;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jumping_Reactive;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emote_Reactive;                                    // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          uses_Weapon_Controlled_Variant_Switcher;           // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_473[0x5];                                      // 0x0473(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAthenaCosmeticItemDefinition> Target_Cosmetic;                             // 0x0478(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTag                           Channel_Tag;                                       // 0x04A0(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFortItemType, struct FGameplayTag>      ForcedVariantsByItemType;                          // 0x04A8(0x0050)(Edit, BlueprintVisible)
	float                                         Delay_Between_Activations;                         // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 Delayed_Weapon_Type;                               // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WeaponVariantSwitcherDelay;                        // 0x0500(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Watch_Cosmetic_Stat;                               // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortStatManagerTag                    Watch_Cosmetic_Stat_Tag;                           // 0x050C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          Stage_Based_Stat_Changes;                          // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Stat_Thresholds;                                   // 0x0518(0x0010)(Edit, BlueprintVisible)
	int32                                         Current_Active_Stage_Number;                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Players_Left_Stat_Watch;                           // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stage_Based_Player_Left_Changes;                   // 0x052D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52E[0x2];                                      // 0x052E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Player_Left_Thresholds;                            // 0x0530(0x0010)(Edit, BlueprintVisible)
	struct FGameplayTag                           Type_Tag;                                          // 0x0540(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           Last_Tag;                                          // 0x0544(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ActuallyChangedWeaponType(const EFortItemType& New_Type);
	void DEBUG_Print_String(const class FString& Input_String);
	void ExecuteUbergraph_B_Athena_PartModifier_Generic(int32 EntryPoint);
	void Handle_Potential_New_Weapon_Type(EFortItemType Type);
	void Hidden_Hand_Check(const TArray<class UFXSystemComponent*>& FX_Systems_associated_with_Hands, const class AFortWeapon* New_Weapon, const class AFortWeapon* Old_Weapon, const bool Only_Set_Niagara_Bool_Variable, bool* isHandHidden);
	void Intermediate_Character_Movement_Event__Jump_(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void Intermediate_Cosmetic_Stat_Changed(class FName Stat_Name, int32 Stat_Value);
	void Intermediate_End_Jump(const struct FHitResult& Hit);
	void Is_Stage_Stat_Requirements_Met(int32 In_Stage_Number_Begin_Tested, int32 In_Stage_Threshold, int32 In_Stat_Value, int32 Current_Active_Stage_Number_0, bool* Passed_Requirements);
	bool IsPartModifierHidden();
	void On_Begin_Emote(class UFortItemDefinition* MontageItemDef, class AFortPawn* PawnEmoting);
	void On_Begin_Jump(float Delta_Seconds, const struct FVector& Old_Location, const struct FVector& Old_Velocity, bool is_Jump_Providing_Force);
	void On_Character_Movement_Updated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void On_Cosmetic_State_Activated(class FName Stat_Name, int32 Stat_Value, int32 STAGE_Num_Being_Activated);
	void On_End_Emote(class UFortItemDefinition* MontageItemDef, class AFortPawn* PawnEmoting);
	void On_End_Jump(const struct FHitResult& Hit);
	void On_Players_Left_Changed(int32 Total_Players_Left);
	void On_Stat_Changed(class FName State_Name, int32 Stat_Value);
	void OnBeginSkydiving();
	void OnDelayExpired();
	void OnEndSkydiving();
	void OnEnterVehicle(const TScriptInterface<class IFortVehicleInterface>& VehicleEntered);
	void OnExitVehicle();
	void OnNewPlayerWeaponType(EFortItemType NewType, EFortItemType OldType);
	void OnPawnAndPartChanged();
	void OnPostResIn();
	void OnStatChanged_56336B1A4612C0356DFB75BC1D618B4F(class FName StatName, int32 StatValue);
	void PreDestruction();
	void Track_Players_Left(int32 NumPlayersLeft);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Athena_PartModifier_Generic_C">();
	}
	static class AB_Athena_PartModifier_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Athena_PartModifier_Generic_C>();
	}
};
static_assert(alignof(AB_Athena_PartModifier_Generic_C) == 0x000008, "Wrong alignment on AB_Athena_PartModifier_Generic_C");
static_assert(sizeof(AB_Athena_PartModifier_Generic_C) == 0x000548, "Wrong size on AB_Athena_PartModifier_Generic_C");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, UberGraphFrame) == 0x000450, "Member 'AB_Athena_PartModifier_Generic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, DefaultSceneRoot) == 0x000458, "Member 'AB_Athena_PartModifier_Generic_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Is_Pet_Part_Modifier) == 0x000460, "Member 'AB_Athena_PartModifier_Generic_C::Is_Pet_Part_Modifier' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Sprint_Reactive) == 0x000461, "Member 'AB_Athena_PartModifier_Generic_C::Sprint_Reactive' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, PetClassToSpawn) == 0x000468, "Member 'AB_Athena_PartModifier_Generic_C::PetClassToSpawn' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Jumping_Reactive) == 0x000470, "Member 'AB_Athena_PartModifier_Generic_C::Jumping_Reactive' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Emote_Reactive) == 0x000471, "Member 'AB_Athena_PartModifier_Generic_C::Emote_Reactive' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, uses_Weapon_Controlled_Variant_Switcher) == 0x000472, "Member 'AB_Athena_PartModifier_Generic_C::uses_Weapon_Controlled_Variant_Switcher' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Target_Cosmetic) == 0x000478, "Member 'AB_Athena_PartModifier_Generic_C::Target_Cosmetic' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Channel_Tag) == 0x0004A0, "Member 'AB_Athena_PartModifier_Generic_C::Channel_Tag' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, ForcedVariantsByItemType) == 0x0004A8, "Member 'AB_Athena_PartModifier_Generic_C::ForcedVariantsByItemType' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Delay_Between_Activations) == 0x0004F8, "Member 'AB_Athena_PartModifier_Generic_C::Delay_Between_Activations' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Delayed_Weapon_Type) == 0x0004FC, "Member 'AB_Athena_PartModifier_Generic_C::Delayed_Weapon_Type' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, WeaponVariantSwitcherDelay) == 0x000500, "Member 'AB_Athena_PartModifier_Generic_C::WeaponVariantSwitcherDelay' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Watch_Cosmetic_Stat) == 0x000508, "Member 'AB_Athena_PartModifier_Generic_C::Watch_Cosmetic_Stat' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Watch_Cosmetic_Stat_Tag) == 0x00050C, "Member 'AB_Athena_PartModifier_Generic_C::Watch_Cosmetic_Stat_Tag' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Stage_Based_Stat_Changes) == 0x000510, "Member 'AB_Athena_PartModifier_Generic_C::Stage_Based_Stat_Changes' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Stat_Thresholds) == 0x000518, "Member 'AB_Athena_PartModifier_Generic_C::Stat_Thresholds' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Current_Active_Stage_Number) == 0x000528, "Member 'AB_Athena_PartModifier_Generic_C::Current_Active_Stage_Number' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Players_Left_Stat_Watch) == 0x00052C, "Member 'AB_Athena_PartModifier_Generic_C::Players_Left_Stat_Watch' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Stage_Based_Player_Left_Changes) == 0x00052D, "Member 'AB_Athena_PartModifier_Generic_C::Stage_Based_Player_Left_Changes' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Player_Left_Thresholds) == 0x000530, "Member 'AB_Athena_PartModifier_Generic_C::Player_Left_Thresholds' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Type_Tag) == 0x000540, "Member 'AB_Athena_PartModifier_Generic_C::Type_Tag' has a wrong offset!");
static_assert(offsetof(AB_Athena_PartModifier_Generic_C, Last_Tag) == 0x000544, "Member 'AB_Athena_PartModifier_Generic_C::Last_Tag' has a wrong offset!");

}

